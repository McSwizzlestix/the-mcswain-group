name: Push Main to Development with GPG signing (Rebase)

on:
  push:
    branches:
      - 'Main-(Production)'  # Trigger the workflow when changes are pushed to 'Main-(Production)'

jobs:
  push_to_development:
    runs-on: ubuntu-latest

    steps:
      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'

      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure Git global identity
        run: |
          git config --global user.email "nickm@loadtoadnetworks.com"
          git config --global user.name "McSwizzleStix"

      - name: Import GPG private key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > gpg.key
          gpg --batch --import gpg.key
          rm gpg.key
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --passphrase-fd 0 --pinentry-mode loopback --armor --detach-sign -o /tmp/signature.gpg -

      - name: Set up Git to use GPG signing
        run: |
          git config --global user.signingkey D35AB1837D40E00B
          git config --global commit.gpgsign true
          git config --global gpg.program gpg

      - name: Fetch latest changes
        run: git fetch --prune

      - name: Rebase 'Development' onto 'Main-(Production)'
        run: |
          git checkout Development || handle_error "Failed to switch to 'Development' branch."
          git rebase 'Main-(Production)'
          git push --force origin Development || handle_error "Failed to force push changes to 'Development' branch."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for conflicts
        run: |
          # Initialize an array to store conflict information
          conflicts=()
          handle_error() {
            echo "Error: $1"
            conflicts+=("$1")
          }
          # Check if there are changes between 'Main-(Production)' and 'Development'
          if git diff --quiet 'Main-(Production)'..HEAD; then
            echo "No new changes to rebase."
          fi
          # Check for conflicts
          if [ ${#conflicts[@]} -gt 0 ]; then
            echo "Conflicts encountered during the rebase process:"
            for conflict in "${conflicts[@]}"; do
              echo "- $conflict"
            done
            exit 1  # Exit with an error code
          fi
        shell: bash
