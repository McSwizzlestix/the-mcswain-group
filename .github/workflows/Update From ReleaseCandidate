# Deploy Release Candidate to Latest Release

on:
  push:
    branches:
      - ReleaseCandidate

jobs:
  webhook_secret:
    runs-on: ubuntu-latest
    steps:
      - name: Check Webhook Secret
        env:
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
        run: |
          if [ "${WEBHOOK_SECRET}" == "${{ secrets.WEBHOOK_SECRET }}" ]; then
            echo "Webhook secret is valid. Proceeding with deployment."
          else
            echo "Webhook secret is not valid. Deployment aborted."
            echo "::error::Webhook secret validation failed."
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: webhook_secret
    steps:
      - name: Set up Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Git User Configurations
        run: |
          git config user.name "${{ secrets.GIT_COMMITTER_NAME }}"
          git config user.email "${{ secrets.GIT_COMMITTER_EMAIL }}"
        env:
          GIT_COMMITTER_NAME: ${{ secrets.GIT_COMMITTER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}

      - name: Set up GPG key
        run: |
          # Create a temporary directory for GPG key management
          mkdir -p ~/.gnupg
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d > ~/.gnupg/private_key.asc
          # Import the GPG private key
          if ! gpg --import ~/.gnupg/private_key.asc; then
            echo "::error::Failed to import GPG private key."
            exit 1
          fi
          # Configure Git to use GPG for signing commits
          git config --global user.signingkey ${{ secrets.GPG_KEY_ID }}
          git config --global commit.gpgsign true
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Deploy to Latest Release
        run: |
          git checkout -B Latest-Release  # Create Latest-Release branch if it doesn't exist
          git merge --no-ff --no-commit ReleaseCandidate
          # Perform GPG signing (adjust the command as needed)
          if ! git commit -S -m "Merge ReleaseCandidate into Latest-Release: Applied the Latest Dev Release Candidate to the Latest-Release (unstable) Branch"; then
            echo "::error::Failed to commit changes."
            exit 1
          fi
          # Force-push to bypass pull requirements
          if ! git push --force origin Latest-Release; then
            echo "::error::Failed to push changes to Latest-Release."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
